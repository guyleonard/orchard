#!/usr/bin/env perl
use strict;
use warnings;

use Bio::DB::Fasta;
use Bio::SearchIO;
use Bio::SeqIO;
use Cwd 'abs_path';
use File::Basename;
use File::Path qw(make_path);
use File::Slurp;
use Getopt::Long;
use IO::Prompt;
use IO::Tee;
use YAML::XS qw/LoadFile/;

our $VERSION = 0.1;
my $version = "Orchard Pipeline v1.0 -- orchard v$VERSION\n";

#
# Input Variables
#
my ( $input_seqs, $taxa_list, $params_file );

#
# YAML Variables
#
my ( $outdir, $threads );
my ($search_prog,    $search_subprog, $search_evalue,
    $search_tophits, $search_maxlength
);
my ( @special_taxa,   $special_tophits );
my ( $alignment_prog, $alignment_opts );
my ( $masking_prog,   $masking_cutoff1, $masking_cutoff2 );
my ( $tree_prog,      $tree_opts, $tree_mintaxa );
my ($orchardDB);

#
# Other Variables
#
my ( $search, $alignment, $masking, $tree );
my $log;

#
# getopt Logic
#
if ( !@ARGV ) {
    help_message();
}

GetOptions(
    'input|i=s'             => \$input_seqs,
    'taxa|t=s'              => \$taxa_list,
    'paramaters|params|p=s' => \$params_file,
    'search|s'              => \$search,
    'alignment|align|a'     => \$alignment,
    'masking|mask|m'        => \$masking,
    'tree|x'                => \$tree,
    'version|v'             => sub { print "$version"; exit(0) },
    'help|h' => sub { help_message() }
) or help_message();

#
# Main
#
if ( defined $input_seqs && defined $taxa_list && defined $params_file ) {
    if ( !-f $input_seqs ) {
        print
            "[Orchard:ERRR] - The input sequences file $input_seqs does not exist!\n";
        exit(1);
    }

    my @taxa;
    if ( -f $taxa_list ) {
        @taxa = read_file("$taxa_list");
    }
    else {
        print
            "[Orchard:ERRR] - The taxon list file $taxa_list does not exist!\n";
        exit(1);
    }

    if ( -f $params_file ) {
        my $paramaters = LoadFile("$params_file");

        $outdir  = $paramaters->{user}->{results};
        $threads = $paramaters->{user}->{threads};

        $search_prog      = $paramaters->{search}->{program};
        $search_subprog   = $paramaters->{search}->{subprogram};
        $search_evalue    = $paramaters->{search}->{evalue};
        $search_tophits   = $paramaters->{search}->{tophits};
        $search_maxlength = $paramaters->{search}->{maxlength};

        if ( defined $paramaters->{special}->{taxa} ) {
            @special_taxa = split /,/, $paramaters->{special}->{taxa};
        }
        $special_tophits = $paramaters->{special}->{tophits};

        $alignment_prog = $paramaters->{alignment}->{program};
        $alignment_opts = $paramaters->{alignment}->{options};

        $masking_prog    = $paramaters->{masking}->{program};
        $masking_cutoff1 = $paramaters->{masking}->{cutoff1};
        $masking_cutoff2 = $paramaters->{masking}->{cutoff2};

        $tree_prog    = $paramaters->{trees}->{program};
        $tree_opts    = $paramaters->{trees}->{options};
        $tree_mintaxa = $paramaters->{trees}->{mintaxa};

        $orchardDB = $paramaters->{directories}->{orchardDB};
    }
    else {
        print
            "[Orchard:ERRR] - The parameters file $params_file does not exist!\n";
        exit(1);
    }

    make_path($outdir);

    if ( -f "$outdir\.log" ) {
        print
            "[Orchard:WARN] - Logfile exists, previous run detected! Continue? Y/N\n";
        my $user_choice = prompt( ' > : ', -yes_no1 );
        if ( $user_choice =~ m/n/i ) {
            print "[Orchard:WARN] - Exiting.\n";
            exit(1);
        }
    }

    # output to screen and log file
    my $logfile = ">>$outdir\.log";
    $log = IO::Tee->new( \*STDOUT, $logfile );
    select $log;

    if ( defined $search eq 1 ) {
        searching( $input_seqs, \@taxa );
    }

    if ( defined $alignment eq 1 ) {
        alignment();
    }

    if ( defined $masking eq 1 ) {
        masking();
    }

    if ( defined $tree eq 1 ) {
        generate_tree();
    }

}
else {
    print "[Orchard:ERRR] - Missing Required Option!\n";
}

#
# Searching
#
sub searching {
    my ( $input_seqs, $taxa_list ) = @_;
    my @taxa = @{$taxa_list};

    my $seqs_in = Bio::SeqIO->new( -file => "<$input_seqs" );

    my $input_seqs_count = 1;
    chomp( my $input_seqs_total = `grep -c ">" $input_seqs` );

    my $hit_seqs_count;

    while ( my $seq = $seqs_in->next_seq() ) {

        print
            "\n[Orchard:SEARCH:INFO] - Processing: $input_seqs_count of $input_seqs_total\n";

        my $sequence_name = $seq->id;
        $sequence_name =~ s/\./\_/;

        if ( $sequence_name =~ m/[\!\"\#\%\:\;\=\?\@\|"]/ ) {
            print
                "[Orchard:SEARCH:WARN] - Sequence Name contains non-alphanumeric characters!!\n";
            if ( $sequence_name =~ m/.*\|.*\|.*/ ) {
                $sequence_name = ( split /\|/, $sequence_name )[1];
                print "[Orchard:SEARCH:WARN] - New name is $sequence_name\n";
            }
            else {
                $sequence_name = ( split / /, $sequence_name )[0];
                $sequence_name =~ s/[^\w\s]/\_/g;
                print "[Orchard:SEARCH:WARN] - New name is $sequence_name\n";
            }
        }

        # Output Query Sequence
        my $query_out = Bio::SeqIO->new(
            -file   => ">$sequence_name\_query.fasta",
            -format => 'fasta'
        );
        $query_out->write_seq($seq);

        # Running total of hits, note '>>' append
        my $hits_out = Bio::SeqIO->new(
            -file   => ">>$sequence_name\_hits.fasta",
            -format => 'fasta'
        );
        $hits_out->write_seq($seq);

        if ( $search_prog =~ /BLAST/i ) {
            print
                "[Orchard:SEARCH:INFO] - Running: blast+ on $sequence_name\n";
            $hit_seqs_count
                = run_blast( \@taxa, $input_seqs, $sequence_name );
        }
        elsif ( $search_prog =~ /BLAT/i ) {
            print "[Orchard:SEARCH:INFO] - Running: blat on $sequence_name\n";
            $hit_seqs_count = run_blat( \@taxa, $input_seqs, $sequence_name );
        }
        elsif ( $search_prog =~ /DIAMOND/i ) {
            print
                "[Orchard:SEARCH:INFO] - Running: diamond on $sequence_name\n";
            $hit_seqs_count
                = run_diamond( \@taxa, $input_seqs, $sequence_name );
        }
        else {
            $search_prog    = 'blast+';
            $search_subprog = 'blastp';
            print
                "[Orchard:SEARCH:INFO] - Running: blast+ on $sequence_name\n";
            $hit_seqs_count
                = run_blast( \@taxa, $input_seqs, $sequence_name );
        }

        $input_seqs_count++;

        if ( $hit_seqs_count <= $tree_mintaxa ) {
            print
                "[Orchard:SEARCH:WARN] - Too Few Hits for $sequence_name.\n";

            unlink "$sequence_name\_query.fasta";
            make_path("$outdir\/excluded");
            system "mv $sequence_name\_hits.fasta $outdir\/excluded";
        }
        else {
            unlink "$sequence_name\_query.fasta";
            make_path("$outdir\/seqs");
            system "mv $sequence_name\_hits.fasta $outdir\/seqs";

            # replace selinocysteine and other junk from
            # sequences with X, just in case!
            system
                "sed -i \'/^>/!s/U|\\w/X/g\' $outdir\/seqs\/$sequence_name\_hits.fasta";
        }
    }
}

sub run_blast {
    my ( $taxa, $input_seqs, $sequence_name ) = @_;

    my @taxa_list  = @{$taxa};
    my $taxa_total = @taxa_list;

    while (@taxa_list) {

        chomp( my $current_taxa = shift(@taxa_list) );

        if ( $current_taxa =~ m/^#/ ) {
            print
                "[Orchard:BLAST:WARN] - Commented out $current_taxa\. Skipping.\n";
        }
        elsif ( !-f "$orchardDB\/$current_taxa\.fasta\.pin" ) {
            print
                "[Orchard:BLAST:WARN] - Missing BLAST DB for $current_taxa\. Skipping.\n";
        }
        else {

            $search_prog =~ s/\+//;
            my $search_output
                = "$sequence_name\_vs\_$current_taxa\_$search_prog\_$search_subprog\.out";
            my $database = "$current_taxa\.fasta";

            if ( grep { $_ eq $current_taxa } @special_taxa ) {
                print
                    "[Orchard:BLAST:INFO] - Using special search for $search_output\n";
                my $search_command = "$search_subprog -task $search_subprog";
                $search_command .= " -db $orchardDB\/$database";
                $search_command .= " -query $sequence_name\_query.fasta";
                $search_command .= " -evalue $search_evalue";
                $search_command .= " -outfmt 6 -out $search_output";
                $search_command .= " -max_target_seqs $special_tophits";
                $search_command .= " -num_threads $threads";
                system($search_command);
            }
            else {
                print
                    "[Orchard:BLAST:INFO] - $search_subprog is running as $search_output\n";
                my $search_command = "$search_subprog -task $search_subprog";
                $search_command .= " -db $orchardDB\/$database";
                $search_command .= " -query $sequence_name\_query.fasta";
                $search_command .= " -evalue $search_evalue";
                $search_command .= " -outfmt 6 -out $search_output";
                $search_command .= " -max_target_seqs $search_tophits";
                $search_command .= " -num_threads $threads";
                system($search_command);
            }
            parse_search_output( $sequence_name, $current_taxa );
        }
    }

    chomp( my $hit_seqs_total = `grep -c ">" $sequence_name\_hits.fasta` );
    print
        "[Orchard:BLAST:INFO] - Number of Sequences found = $hit_seqs_total\n";
    return $hit_seqs_total;
}

sub run_blat {
    my ( $taxa, $input_seqs, $sequence_name ) = @_;

    my @taxa_list  = @{$taxa};
    my $taxa_total = @taxa_list;

    while (@taxa_list) {

        chomp( my $current_taxa = shift(@taxa_list) );

        if ( $current_taxa =~ m/^#/ ) {
            print
                "[Orchard:BLAT:WARN] - Skipping commented out $current_taxa\n";
        }
        else {

            my $search_output
                = "$sequence_name\_vs\_$current_taxa\_$search_prog\_$search_subprog\.out";
            my $database = "$current_taxa\.fasta";

            print
                "[Orchard:BLAT:INFO] - $search_subprog is running as $search_output\n";
            my $blat_command = 'blat';
            $blat_command .= " \-$search_subprog";
            $blat_command .= " $orchardDB\/$database";
            $blat_command .= " $sequence_name\_query.fasta";
            $blat_command .= ' -out=blast8';
            $blat_command .= " $search_output 1>/dev/null";

            system($blat_command);
            parse_search_output( $sequence_name, $current_taxa );

        }
    }

    chomp( my $hit_seqs_total = `grep -c ">" $sequence_name\_hits.fasta` );
    print
        "[Orchard:BLAT:INFO] - Number of Sequences found = $hit_seqs_total\n";
    return $hit_seqs_total;
}

sub run_diamond {
    my ( $taxa, $input_seqs, $sequence_name ) = @_;

    my @taxa_list  = @{$taxa};
    my $taxa_total = @taxa_list;

    while (@taxa_list) {

        chomp( my $current_taxa = shift(@taxa_list) );

        if ( $current_taxa =~ m/^#/ ) {
            print
                "[Orchard:DIAMOND:WARN] - Skipping commented out $current_taxa\n";
        }
        elsif ( !-f "$orchardDB\/$current_taxa\.fasta\.dmnd" ) {
            print
                "[Orchard:DIAMOND:WARN] - Missing DIAMOND DB for $current_taxa\. Skipping.\n";
        }
        else {

            my $search_output
                = "$sequence_name\_vs\_$current_taxa\_$search_prog\_$search_subprog\.out";
            my $database = "$current_taxa\.fasta";

            if ( grep { $_ eq $current_taxa } @special_taxa ) {
                print
                    "[Orchard:DIAMOND:INFO] - Using special search for $search_output\n";
                my $diamond_command = "diamond $search_subprog --quiet";
                $diamond_command .= " --threads $threads";
                $diamond_command .= " --db $orchardDB\/$database";
                $diamond_command .= " --query $sequence_name\_query.fasta";
                $diamond_command .= " --evalue $search_evalue";
                $diamond_command .= " --max-target-seqs $special_tophits";
                $diamond_command .= " --out $search_output 2>/dev/null";

                system($diamond_command);
            }
            else {
                print
                    "[Orchard:DIAMOND:INFO] - $search_subprog is running as $search_output\n";

                my $diamond_command = "diamond $search_subprog --quiet";
                $diamond_command .= " --threads $threads";
                $diamond_command .= " --db $orchardDB\/$database";
                $diamond_command .= " --query $sequence_name\_query.fasta";
                $diamond_command .= " --evalue $search_evalue";
                $diamond_command .= " --max-target-seqs $search_tophits";
                $diamond_command .= " --out $search_output 2>/dev/null";

                system($diamond_command);
            }

            parse_search_output( $sequence_name, $current_taxa );
        }
    }

    chomp( my $hit_seqs_total = `grep -c ">" $sequence_name\_hits.fasta` );
    print
        "[Orchard:DIAMOND:INFO] - Number of Sequences found = $hit_seqs_total\n";
    return $hit_seqs_total;
}

sub parse_search_output {

    my ( $sequence_name, $current_taxa ) = @_;
    my $search_output
        = "$sequence_name\_vs\_$current_taxa\_$search_prog\_$search_subprog\.out";
    my $database = "$current_taxa\.fasta";
    my $sequence_file;

    if ( !-f "$orchardDB\/$database\.index" ) {
        print "[Orchard:PARSE:INFO] - Generating FASTA Index\n";
        $sequence_file
            = Bio::DB::Fasta->new( "$orchardDB\/$database", -reindex );
    }
    else {
        $sequence_file = Bio::DB::Fasta->new("$orchardDB\/$database");
    }

    my $read_search_output = Bio::SearchIO->new(
        -format => 'blasttable',
        -file   => $search_output
    );

    while ( my $result = $read_search_output->next_result ) {
        while ( my $hit = $result->next_hit ) {
            my $hit_name = $hit->name;
            my $sequence = $sequence_file->seq($hit_name);

            if ( defined $sequence ) {
                my $sequence_length = length $sequence;
                if ( $sequence_length <= $search_maxlength ) {
                    open my $hits_seq_out, '>>', "$sequence_name\_hits.fasta";
                    print {$hits_seq_out} ">$hit_name\n$sequence\n";
                    close $hits_seq_out;
                }
                else {
                    print
                        "[Orchard:PARSE:WARN] - $sequence_name: sequence hit too long for: $hit_name -> $current_taxa\n";
                }
            }
            else {
                print
                    "[Orchard:PARSE:WARN] - $sequence_name: sequence retreival problem for: $hit_name -> $current_taxa\n";
            }
        }
    }

    $search_prog =~ s/\+//;
    my $report_dir
        = "$outdir\/reports\/$sequence_name\/$search_prog\_$search_subprog";
    make_path($report_dir);
    system "mv $search_output $report_dir";
}

#
# Alignment
#
sub alignment {
    my $sequence_directory   = "$outdir\/seqs";
    my $alignments_directory = "$outdir\/alignments";

    my @files_to_align = glob "$sequence_directory\/*.fasta";

    if ( !-d $sequence_directory ) {
        print
            "[Orchard:ALIGN:INFO] - The directory $sequence_directory does not exist!\n";
        exit(1);
    }

    if ( !@files_to_align ) {
        print
            "[Orchard:ALIGN:INFO] - There are no sequence files in $sequence_directory!\n";
        exit(1);
    }

    make_path($alignments_directory);

    for my $i ( 0 .. $#files_to_align ) {
        my $current_file = $files_to_align[$i];
        my $basename = fileparse( $current_file, qr/\Q.fasta\E/ );

        if ( $alignment_prog =~ /mafft/i ) {
            print
                "[Orchard:ALIGN:INFO] - Aligning $current_file with $alignment_prog\n";
            my $mafft_command = "mafft $alignment_opts";
            $mafft_command .= " --thread $threads";
            $mafft_command
                .= " $current_file > $alignments_directory\/$basename\_aligned\.fasta";

            system($mafft_command);
        }
        elsif ( $alignment_prog =~ /muscle/i ) {
            print
                "[Orchard:ALIGN:INFO] - Aligning $current_file with $alignment_prog\n";
            my $muscle_command = "muscle $alignment_opts";
            $muscle_command
                .= " -in $current_file -out $alignments_directory\/$basename\_aligned\.fasta";

            system($muscle_command);
        }
        else {
            print
                "[Orchard:ALIGN:INFO] - Aligning $current_file with $alignment_prog\n";
            my $mafft_command = "mafft $alignment_opts";
            $mafft_command .= " --thread $threads";
            $mafft_command
                .= " $current_file > $alignments_directory\/$basename\_aligned\.fasta";

            system($mafft_command);
        }
    }
}

#
# Masking
#
sub masking {
    my $alignments_directory = "$outdir\/alignments";
    my $masking_directory    = "$outdir\/masking";

    my @files_to_mask = glob "$alignments_directory\/*.fasta";

    if ( !-d $alignments_directory ) {
        print
            "[Orchard:MASK:INFO] - The directory $alignments_directory does not exist!\n";
        exit(1);
    }

    if ( !@files_to_mask ) {
        print
            "[Orchard:MASK:INFO] - There are no sequence files in $alignments_directory!\n";
        exit(1);
    }

    make_path($masking_directory);

    for my $i ( 0 .. $#files_to_mask ) {
        my $current_file = $files_to_mask[$i];
        my $basename = fileparse( $current_file, qr/\Q.fasta\E/ );

        if ( $masking_prog =~ /trimal/i ) {
            print
                "[Orchard:MASK:INFO] - Masking $current_file Alignment with $masking_prog\.\n";
            my $mask_length
                = run_trimal( $masking_directory, $current_file, '-nogaps' );

            if ( $mask_length <= $masking_cutoff1 ) {
                print
                    "[Orchard:MASK:WARN] - Length is $mask_length and smaller than 1st cutoff: $masking_cutoff1. Trying again!\n";
                my $mask_length
                    = run_trimal( $masking_directory, $current_file,
                    '-automated1' );
                if ( $mask_length <= $masking_cutoff2 ) {
                    print
                        "[Orchard:MASK:WARN] - Length is $mask_length and smaller than 2nd cutoff: $masking_cutoff2. Excluding!\n";
                    system
                        "mv $masking_directory\/$basename\_masked\.fasta $outdir\/excluded";
                }
                else {
                    print
                        "[Orchard:MASK:INFO] - Length is $mask_length and bigger than 2nd cutoff: $masking_cutoff2. Next!\n";
                }
            }
            else {
                print
                    "[Orchard:MASK:INFO] - Length is $mask_length and bigger than 1st cutoff: $masking_cutoff1. Next!\n";
            }
        }
        elsif ( $masking_prog =~ /divvier/i ) {
            print
                "[Orchard:MASK:INFO] - Masking Alignment with $masking_prog\n";
            run_divvier( $masking_directory, $current_file );
        }
        else {
            print
                "[Orchard:MASK:INFO] - Please use Correct Program Name for Trimming in your YAML\n";
            exit(1);
        }
    }
}

sub run_divvier {
    my ( $masking_directory, $current_file ) = @_;
    my $basename = fileparse( $current_file, qr/\Q.fasta\E/ );

    my $symlink = abs_path($current_file);
    system("ln -s $symlink $masking_directory");

    my $divvier_command
        = "divvier -divvygap $masking_directory\/$basename\.fasta 1>/dev/null";
    system($divvier_command);

    system("rm $masking_directory\/$basename\.fasta");
    system("rm $masking_directory\/$basename\.fasta\.PP");
    system(
        "mv $masking_directory\/$basename\\ta.divvy.fas $masking_directory\/$basename\_masked\.fasta"
    );
}

sub run_trimal {
    my ( $masking_directory, $current_file, $masking_opt ) = @_;
    my $basename = fileparse( $current_file, qr/\Q.fasta\E/ );

    my $trimal_command = 'trimal';
    $trimal_command .= " -in $current_file";
    $trimal_command .= " -out $masking_directory\/$basename\_masked\.fasta";
    $trimal_command .= " $masking_opt";

    system($trimal_command);

    my ( $sequence, $length );
    if ( !-f "$masking_directory\/$basename\_masked\.fasta" ) {
        $length = '0';
    }
    else {

        my $bioseq = Bio::SeqIO->new(
            '-file'  => "$masking_directory\/$basename\_masked\.fasta",
            -verbose => -1
        );
        $sequence = $bioseq->next_seq;
        $length   = $sequence->length;
    }

    return $length;
}

#
# Trees
#
sub generate_tree {
    my $masking_directory = "$outdir\/masking";
    my $trees_directory   = "$outdir\/trees";

    my @files_to_tree = glob "$masking_directory\/*.fasta";

    if ( !-d $masking_directory ) {
        print
            "[Orchard:TREE:INFO] - The directory $masking_directory does not exist!\n";
        exit(1);
    }

    if ( !@files_to_tree ) {
        print
            "[Orchard:TREE:INFO] - There are no sequence files in $masking_directory!\n";
        exit(1);
    }

    make_path($trees_directory);

    for my $i ( 0 .. $#files_to_tree ) {
        my $current_file = $files_to_tree[$i];
        my $basename = fileparse( $current_file, qr/\Q.fasta\E/ );

        if ( $tree_prog =~ /fasttree/i ) {
            print "[Orchard:TREE:INFO] - Running FastTree on $current_file\n";
            run_fasttree( $current_file, $trees_directory );
        }
        elsif ( $tree_prog =~ /iqtree/i ) {
            print "[Orchard:TREE:INFO] - Running IQTree on $current_file\n";
            my $symlink = abs_path($current_file);
            system("ln -s $symlink $trees_directory");
            run_iqtree( $current_file, $trees_directory );
            system("rm $trees_directory\/$basename\.fasta");
        }
    }
}

sub run_fasttree {
    my ( $current_file, $trees_directory ) = @_;
    my $basename = fileparse( $current_file, qr/\Q.fasta\E/ );
    my $fasttree_command;

    print "[Orchard:FASTTREE:INFO] - Calculating FastTree on $current_file\n";

    if ( $tree_prog =~ /fasttreemp/i ) {
        $fasttree_command = "FastTreeMP $tree_opts";
        $fasttree_command .= " $current_file";
        $fasttree_command .= " > $trees_directory\/$basename\_FT.treefile";
    }
    else {
        $fasttree_command = "FastTree $tree_opts";
        $fasttree_command .= " $current_file";
        $fasttree_command .= " > $trees_directory\/$basename\_FT.treefile";
    }

    system($fasttree_command);
}

sub run_iqtree {
    my ( $current_file, $trees_directory ) = @_;
    my $basename = fileparse( $current_file, qr/\Q.fasta\E/ );

    print "[Orchard:IQTREE:INFO] - Calculating IQTree on $current_file\n";

    my $iqtree_command = "iqtree -s $trees_directory\/$basename\.fasta";
    $iqtree_command .= " -nt $threads";
    $iqtree_command .= " $tree_opts -pre $trees_directory\/$basename\_IQ";

    system($iqtree_command);

    make_path("$trees_directory\/iqtree_info");
    system(
        "mv $trees_directory\/*.bionj $trees_directory\/*.gz $trees_directory\/*.iqtree $trees_directory\/*.log $trees_directory\/*.mldist $trees_directory\/*.phy $trees_directory\/iqtree_info"
    );
}

#
# Help Function
#
sub help_message {
    print
        "Usage: bin/orchard -i seqs.fasta -t taxa.txt -p params.yaml -s -a -m -x\n";
    print "Required Parameters\n";
    print "\t-i <sequences.fasta>\tInput Sequences in FASTA Format\n";
    print "\t-t <taxa_list.txt>\tList of orchardDB Taxa IDs\n";
    print "\t-p <parameters.yaml>\tParameters File in YAML Format\n";
    print "Optional Parameters\n";
    print "\t-s\tRun Searches e.g. BLASTp\n";
    print "\t-a\tRun Alignments e.g. MAFFT\n";
    print "\t-m\tRun Masking e.g trimAl\n";
    print "\t-x\tRun Trees e.g FastTree2\n";
    print
        "Cite: https://github.com/guyleonard/orchard and doi: 10.1105/tpc.109.065805\n";
    exit(0);
}
